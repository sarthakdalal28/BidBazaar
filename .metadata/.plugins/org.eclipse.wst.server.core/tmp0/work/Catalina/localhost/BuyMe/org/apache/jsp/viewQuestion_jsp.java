/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.5
 * Generated at: 2023-05-01 19:17:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.io.*;
import java.util.*;
import java.sql.*;
import javax.servlet.http.*;
import javax.servlet.*;

public final class viewQuestion_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write(" \n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("   <head>\n");
      out.write("      <title>Questions Forum: Thread</title>\n");
      out.write("      <link rel=\"stylesheet\" href=\"css/login.css\" type=\"text/css\">\n");
      out.write("<style>\n");
      out.write("	body {\n");
      out.write("		display: flex;\n");
      out.write("		flex-direction: column;\n");
      out.write("		height: 100vh;\n");
      out.write("		margin: 0;\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	h1 {\n");
      out.write("		font-size: 3em;\n");
      out.write("		font-weight: bold;\n");
      out.write("		color: #1a1a1a;\n");
      out.write("		text-align: center;\n");
      out.write("		text-shadow: 2px 2px 4px #888888;\n");
      out.write("		margin-bottom: 1em;\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	h2 {\n");
      out.write("	font-size: 1 em;\n");
      out.write("	color: #333;\n");
      out.write("	margin-bottom: 0.5em;\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	/* Link Styles */\n");
      out.write("	a {\n");
      out.write("	color: #d02323;\n");
      out.write("	text-decoration: none;\n");
      out.write("	border-bottom: 2px solid #d02323;\n");
      out.write("	transition: border-bottom-color 0.3s ease-in-out;\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	a:hover {\n");
      out.write("	color: black;\n");
      out.write("	}\n");
      out.write("</style>\n");
      out.write("   </head>\n");
      out.write("   <body>\n");
      out.write("   \n");
      out.write("     		");
    
     		  String url = "jdbc:mysql://localhost:3306/buyme";
     		  Class.forName("com.mysql.jdbc.Driver");
     		  try {
     			Connection con = DriverManager.getConnection(url, "root", "password");
     		    
     			
     			Statement st = con.createStatement();
     		    
     		    java.sql.Timestamp date = new java.sql.Timestamp(new java.util.Date().getTime());
				
     			int threadid = Integer.parseInt(request.getParameter("threadid"));
     			String username = (String)session.getAttribute("user");    
     		    
			String threads_query = "SELECT * FROM Thread WHERE threadid='" + threadid + "'";
     		//should only bring back the one thread
			
			//Note: If I wanted to just show the title and then expand when clicked on, I would have to use javascript
			
			//go through all the threads and print them out
			//st = con.createStatement();
			ResultSet result_threads = st.executeQuery(threads_query);	
			while(result_threads.next()){

				//int threadid = result_threads.getInt("threadid");
				int user_id = result_threads.getInt("user_id");//the poster
				Timestamp timecreated = result_threads.getTimestamp("timecreated");
				String th_title = result_threads.getString("title");
				String th_description = result_threads.getString("description");
				String solved = result_threads.getString("solved");//solved is a BIT type, which is either 0, 1 or null, solved is 1, unsolved is 0, null means who cares if its solved or not
				
			    //if ((session.getAttribute("user") == null)) {
			    	//they're not logged in
			    	
			    //}

				//get the username from the user_id to show who posted the thread
				String get_username = "SELECT u.username FROM User u WHERE u.user_id = " + user_id + " ";
				st = con.createStatement();
				ResultSet result_username = st.executeQuery(get_username);
				String th_username = "";
				if(result_username.next()){
					th_username = result_username.getString("u.username");
				}
				//TO DO:
				//for solved need to get the value from the databse and convert the value to a string ie. 'true'/'false'
				
				String th_s = "";
				if(solved.equals("0")){
					th_s = "Unsolved";	
				}else{
					th_s = "Solved";	
				}
			
      out.write("\n");
      out.write("				<ul class=\"thread\">\n");
      out.write("				<li><span class=\"keyword\">Title:</span>");
      out.print(th_title);
      out.write("</li>\n");
      out.write("				<li><span class=\"keyword\">Solved?:</span>");
      out.print(th_s);
      out.write("</li>\n");
      out.write("				<li><span class=\"keyword\">Description:</span>");
      out.print(th_description);
      out.write("</li>\n");
      out.write("				<li><span class=\"keyword\"> by </span>");
      out.print(th_username);
      out.write("</li>\n");
      out.write("				<li><span class=\"keyword\"> on </span>");
      out.print(timecreated.toString());
      out.write("</li>\n");
      out.write("				\n");
      out.write("				");

				//in an ideal world I would only show these options to the poster, but...
				String href1 = "editThread.jsp?threadid=" + threadid + "&user_id=" + user_id;
				
      out.write("\n");
      out.write("				<li><a href=\"");
      out.print(href1);
      out.write("\"><span class=\"keyword\">edit</span></a></li>\n");
      out.write("				");

				//for another day
				//String href2 = "deleteThread.jsp?threadid=" + threadid + "&user_id=" +  user_id;
				//out.print("<li><a href='" + href2 + "'><span class='keyword'>delete</span></a></li>");
				
				//create post
				String post = "createPost.jsp?threadid=" + threadid;
				
      out.write("\n");
      out.write("				<li><a href=\"");
      out.print(post);
      out.write("\"><span class=\"keyword\">new post</span></a></li>\n");
      out.write("				");

				//put the posts for the threads (the comments)
				String posts_query = "SELECT * FROM Post WHERE Post.threadid = " + threadid + "";
				st = con.createStatement();
				ResultSet result_posts = st.executeQuery(posts_query);
				//TO DO: if there aren't any posts, say "No posts yet for this thread" when clicked on.
				while(result_posts.next()){
					int postid = result_posts.getInt("post_id");
					int po_user_id = result_posts.getInt("user_id");
					Timestamp po_timecreated = result_posts.getTimestamp("timecreated");
					String po_body = result_posts.getString("body");

					//get the username of the poster
					String po_username = "";
					String get_username2 = "SELECT * FROM User u WHERE u.user_id = " + po_user_id + " ";
					st = con.createStatement();
					ResultSet result_username2 = st.executeQuery(get_username2);
					if(result_username2.next()){
						po_username = result_username2.getString("username");
					}
					
					
      out.write("\n");
      out.write("					<ul class=\"posts\">\n");
      out.write("					<li>");
      out.print(po_username);
      out.write("<span class=\"keyword\"> posted:</span> </li>\n");
      out.write("					<li>");
      out.print(po_body);
      out.write("</li>\n");
      out.write("					<li><span class=\"keyword\">on ");
      out.print(po_timecreated.toString());
      out.write("</span></li>\n");
      out.write("					\n");
      out.write("					</ul>\n");
      out.write("					\n");
      out.write("					");

					//should I insert some sort of divider?
				}//for the posts' while
				
      out.write("\n");
      out.write("				</ul>\n");
      out.write("				");

			}//for the threads's while 
			
				/*
			out.print("</ul>");
			out.print("</div>");
		}//the get threads' while
		*/

			//close connection, right?
			con.close();
	  } catch(SQLException se) {
	      se.printStackTrace();
		} catch (Exception ex) {//I did not evenly space out/format this code
			out.println(ex);
		}

		
      out.write("\n");
      out.write("     \n");
      out.write("     \n");
      out.write("   </body>\n");
      out.write("   \n");
      out.write("   \n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
