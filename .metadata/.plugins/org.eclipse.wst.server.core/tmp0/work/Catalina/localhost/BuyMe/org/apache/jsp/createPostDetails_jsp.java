/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.5
 * Generated at: 2023-05-01 05:19:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import java.io.*;
import java.util.*;
import java.sql.*;

public final class createPostDetails_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');

	try {
  	String user = (String)session.getAttribute("user");//request.getParameter("user"); 
	//String threadid = request.getParameter(threadid);//SQL does this automatically??...
    	//String title = request.getParameter("title");
	//String desc = request.getParameter("description");
    	Class.forName("com.mysql.jdbc.Driver");
    	String url = "jdbc:mysql://localhost:3306/buyme";
	Connection con = DriverManager.getConnection(url, "root", "password");
    //Statement st = con.createStatement();

    	//just incase, a double check
		if(user == null || user.equals("null")){//all the post data will be lost, they weren't logged in :/, this case shouldn't happen
			response.sendRedirect("login.jsp");
		}
    
    	String threadid = request.getParameter("threadid");
    
    	//check if the user posting is either a customer rep or the poster of the thread
		String user_id = "";//this is the attempting poster
		//get the username from the user_id to show who posted the thread
		String get_userid = "SELECT u.user_id FROM User u WHERE u.username = '" + user + "' ";
		Statement st = con.createStatement();
		ResultSet result_userid = st.executeQuery(get_userid);
		if(result_userid.next()){
			user_id = result_userid.getString("u.user_id");
		}
	
		String tuserid = "";//the poster of the thread
		String get_posterid = "SELECT * FROM Thread t WHERE t.threadid = '" + threadid + "' ";
		result_userid = st.executeQuery(get_posterid);
		if(result_userid.next()){
			tuserid = result_userid.getString("user_id");	
		}
		
		boolean isCustomerRep = false;
		boolean isAdmin = false;//check the databases now and update these values
		
		
		result_userid = st.executeQuery("select * from Representative where user_id='" + user_id + "'");
	    if (result_userid.next()) {
	    	isCustomerRep = true;
	    } else {
	    	//they're not a customer rep
	    }
	    
		result_userid = st.executeQuery("select * from Admin where user_id='" + user_id + "'");
	    if (result_userid.next()) {
	    	isAdmin = true;
	    } else {
	    	//they're not an admin
	    }

		
		
		if((!tuserid.equals(user_id)) && isAdmin == false && isCustomerRep == false){
			out.print("You may not post in a thread that you haven't created if your not a customer rep or admin");
		}
		if(tuserid.equals(user_id) || isAdmin==true || isCustomerRep==true){
			//continue :)
			
			String body = request.getParameter("body");
    			String title = request.getParameter("title");

			java.sql.Timestamp date = new java.sql.Timestamp(new java.util.Date().getTime());
			String topost = String.format("INSERT INTO `Post` (threadid, post_id, user_id, body, timecreated) VALUES ('%s', null, '%s', '%s', '%s');", threadid, user_id, body, date.toString());
			out.println(topost);
			st.executeUpdate(topost);

			response.sendRedirect("questions.jsp");
			con.close();
			
		
		}else{
			//get outta here attempting poster	
			
		}
		
	} catch(SQLException se) {
    	se.printStackTrace();
	} catch (Exception ex){
		out.println(ex);
	}
    
    
    

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
